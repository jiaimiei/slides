name: Release

on:
  push:
    branches:
      - main

jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest" # for Arm based macs (M1 and above)
                      args: "--target aarch64-apple-darwin"
                    - platform: "macos-13" # for Intel based macs
                      args: "--target x86_64-apple-darwin"
                    - platform: "ubuntu-22.04"
                      args: ""
                    - platform: "windows-latest"
                      args: ""

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*

            - name: Install Rust nightly
              uses: dtolnay/rust-toolchain@nightly
              with:
                  components: rustfmt

            - name: Install dependencies (macOS only)
              if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-13'
              run: |
                  brew install ffmpeg
                  brew install --cask xquartz

            - name: Install dependencies (Ubuntu only)
              if: matrix.platform == 'ubuntu-22.04'
              run: |
                  wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
                  sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.290-jammy.list https://packages.lunarg.com/vulkan/1.3.290/lunarg-vulkan-1.3.290-jammy.list
                  sudo apt-get update
                  sudo apt-get install vulkan-sdk
                  sudo apt-get install -y libavcodec-dev libavdevice-dev libavutil-dev libavfilter-dev libavformat-dev libpostproc-dev libswresample-dev libswscale-dev libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libraw1394-dev libavc1394-dev libiec61883-dev libjack-dev libopenal-dev libxcb-shape0-dev libxcb-xfixes0-dev libcdio-paranoia-dev libcdio-cdda-dev libcdio-dev libdc1394-dev libasound-dev libcaca-dev libpulse-dev libsdl2-dev libsndio-dev libpocketsphinx-dev libsphinxbase-dev libbs2b-dev liblilv-dev libsratom-dev libsord-dev libserd-dev librubberband-dev libsamplerate-dev libmysofa-dev flite1-dev libgme-dev libopenmpt-dev libchromaprint-dev libbluray-dev libgnutls30 librabbitmq-dev libsrt-gnutls-dev libssh-dev libzmq5 libvpx-dev libwebpmux3 libflite1 libass-dev libvidstab-dev libzimg-dev libgnutls28-dev libzmq3-dev libwebp-dev libdav1d-dev libzvbi-dev libsnappy-dev libaom-dev libcodec2-dev libgsm1-dev libmp3lame-dev libopus-dev libshine-dev libspeex-dev libtheora-dev libtwolame-dev libx264-dev libx265-dev libxvidcore-dev libsoxr-dev libva-dev libvdpau-dev libmfx-dev ocl-icd-opencl-dev

            - name: Install dependencies (Windows only)
              if: matrix.platform == 'windows-latest'
              uses: johnwason/vcpkg-action@v6
              with:
                  pkgs: ffmpeg
                  triplet: x64-windows
                  token: ${{ github.token }}
                  github-binarycache: true

            - name: vcpkg integrate
              if: matrix.platform == 'windows-latest'
              run: |
                  vcpkg integrate install
                  cd src-tauri
                  cargo install cargo-vcpkg
                  cargo vcpkg build

            - name: Install frontend dependencies
              run: yarn install

            - name: Create env file
              run: echo "MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY }}" > .env

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tagName: v__VERSION__
                  releaseName: "v__VERSION__"
                  releaseBody: "See the assets to download and install this version."
                  releaseDraft: false
                  prerelease: false
                  args: ${{ matrix.args }}
            
            - name: Remove env file
              run: rm .env
